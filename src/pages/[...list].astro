---
import { getCollection } from 'astro:content';
import ExternalLink from '../components/ExternalLink.astro';
import Footer from '../components/Footer.astro';
import Head from '../components/Head.astro';
import { getNotes, normalizeId } from '../components/note';

export const getStaticPaths = async () => {
	const posts = await getCollection('posts');
	const tags = new Set(posts.flatMap(post => post.data.tags));
	return [
		/* post list */ { params: { list: undefined }, props: { type: 'post' } },
		/* tagged post list */ ...Array.from(tags).map(tag => ({ params: { list: `/tagged/${tag}` }, props: { type: 'post', tag } })),
		/* note list */ { params: { list: '/note' }, props: { type: 'note' } },
		/* stars list */ { params: { list: '/star' }, props: { type: 'star' } },
	];
};

const { type, tag } = Astro.props;

const navItems = [
	{ href: '/', text: 'Posts', active: type === 'post' && !tag },
	{ href: '/note', text: 'Notes', active: type === 'note' },
	{ href: '/star', text: 'Stars', active: type === 'star' },
	...(tag ? [{ href: `/tagged/${tag}`, text: `Posts#${tag}`, active: true }] : []),
];

const getNoteItems = async () => {
	const notes = await getNotes();
	return Object.entries(notes).map(([title, notes]) => ({
		url: `/note/${normalizeId(title)}/`,
		title,
		date: notes!.map(note => note.data.date).reduce((a, b) => (a > b ? a : b)),
		draft: false,
	}));
};

const getPostItems = async (tag?: string) => {
	const posts = await getCollection('posts');
	return posts
		.filter(post => !tag || post.data.tags.includes(tag))
		.map(({ slug, data: { title, date, draft } }) => ({
			url: `/post/${slug}/`,
			title,
			date,
			draft,
		}));
};

const itemsOfYear = Object.groupBy(await (type === 'note' ? getNoteItems() : getPostItems(tag)), item => item.date.getFullYear());

const starItems = (await getCollection('stars')).flatMap(list => list.data);

const zeroPadding = (n: number) => (n < 10 ? '0' : '') + n;
const dateString = (date: Date) => zeroPadding(date.getMonth() + 1) + '/' + zeroPadding(date.getDate());
---

<!doctype html>
<html lang='en' class='theme-ayu text-pretty'>
	<Head title={type === 'note' ? `qsliu's notes` : tag ? `#${tag} at qsliu's blog` : undefined} />
	<body class='mx-auto flex min-h-screen w-main max-w-full flex-col justify-between border-x'>
		<main class='border-y'>
			<nav>
				{
					navItems.map(({ href, text, active }) => (
						<a
							data-active={active + ''}
							class='inline-block border-r px-3 py-1 text-lg data-[active=true]:bg-main data-[active=false]:text-inactive data-[active=true]:text-active data-[active=false]:hover:bg-active data-[active=false]:hover:text-active'
							{href}
						>
							{text}
						</a>
					))
				}
			</nav>
			{
				type === 'star' ? (
					<>
						{starItems
							.flatMap(({ title, url, posts }) => [
								{ title, url },
								...(posts?.map(({ title, url }, idx) => ({
									title: (idx < posts.length - 1 ? '├─ ' : '└─ ') + title,
									url,
								})) ?? []),
							])
							.map(({ title, url }) => (
								<>
									<ExternalLink class='group flex items-baseline justify-between bg-main px-2 py-1 hover:bg-active' href={url}>
										{title}
									</ExternalLink>
								</>
							))}
					</>
				) : (
					Object.entries(itemsOfYear)
						.sort(([a], [b]) => Number(b) - Number(a))
						.map(([year, items]) => (
							<>
								<h2 class='border-y'>
									<span class='inline-block h-full border-r bg-main px-2 py-1 text-disabled overlay-border-b'>{year}</span>
								</h2>
								{items!
									.sort((a, b) => b.date.valueOf() - a.date.valueOf())
									.map(({ url, title, date, draft }) => (
										<a class='group flex items-baseline justify-between bg-main px-2 py-1 hover:bg-active' href={url}>
											<span>
												{draft && (
													<>
														[<span class=' underline'>draft</span>]
													</>
												)}
												{title}
											</span>
											<time class='text-nowrap text-inactive group-hover:text-active' datetime={date.toISOString()}>
												{dateString(date)}
											</time>
										</a>
									))}
							</>
						))
				)
			}
		</main>
		<Footer />
	</body>
</html>
