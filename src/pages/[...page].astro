---
import { getCollection } from 'astro:content';
import Footer from '../components/Footer.astro';
import { getNotes, normalizeId } from '../components/note';
import RandomOneOf from '../components/RandomOneOf.astro';
import Nav from '../components/Nav.astro';
import Head from '../components/Head.astro';

export async function getStaticPaths() {
	const notes = Object.entries(await getNotes()).map(async ([page, notes]) => ({
		props: { page, notes: await Promise.all(notes!.map(async ({ render, ...note }) => ({ ...note, rendered: await render() }))) },
		params: { page: `/note/${normalizeId(page)}` },
	}));
	const posts = (await getCollection('posts'))
		.filter(({ data: { theme } }) => theme === 'default')
		.map(async ({ render, ...post }) => ({
			props: { post: { ...post, rendered: await render() } },
			params: { page: `/post/${post.slug}` },
		}));
	return await Promise.all([...notes, ...posts]);
}

const { page, notes, post } = Astro.props;
---

<!doctype html>
<html lang='en' class='theme-ayu text-pretty bg-gray-50'>
	<Head title={post?.data.title || page} description={post?.data.description} />
	<body class='mx-auto flex min-h-screen w-main max-w-full flex-col justify-between'>
		<main class='mt-4 rounded-sm bg-white px-4 pb-6 pt-1 shadow-lg shadow-gray-200'>
			<Nav class='font-serif text-2xl' nav={post ? [{ href: '/', text: 'Post' }] : [{ href: '/note', text: 'Note' }]} />
			{
				post && (
					<time class='text-lg' datetime={post.data.date.toISOString()}>
						{post.data.date.toLocaleDateString('en-us', { year: 'numeric', month: 'short', day: 'numeric' })}
					</time>
				)
			}
			<h1 class='font-serif text-4xl font-bold'>{page || post?.data.title}</h1>
			{
				post && (
					<ul class='flex flex-wrap gap-1'>
						{post.data.tags.map(tag => (
							<a href={`/tagged/${tag}/`}>
								<li class='h-fit rounded-full border border-gray-300 bg-slate-100 px-1 font-light text-gray-600'>{tag}</li>
							</a>
						))}
					</ul>
				)
			}
			<hr class='mb-4 mt-2' />
			<article class='rendered-content prose'>
				{post && <post.rendered.Content components={{ RandomOneOf }} />}
				{
					notes &&
						notes
							.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
							.map(({ data: { date }, rendered }, i) => (
								<>
									{i > 0 && <hr class='mb-2 mt-4' />}
									<time class='text-lg' datetime={date.toISOString()}>
										{date.toLocaleDateString('en-us', { year: 'numeric', month: 'short', day: 'numeric' })}
									</time>
									<rendered.Content />
								</>
							))
				}
			</article>
		</main>
		<Footer />
	</body>
</html>
